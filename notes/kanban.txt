##########################################################
# Release 1.0.0
##########################################################

* initial write-up document
  • basic description of "A block-based genetic algorithm time-series forecasting graph processor"

* initialize kgraph and validate connection

* load initial linear test data case
  • linear ascending values for the nodes in a linear path
  • nodes and edges contain time values
  
* create graphs for both data and for the garden.

* create initial thought

* have goal location represented in graph distance.

* create initial fitness function

* ponder the value of predicting the past ("backcasting")

* create initial garden

* create a thought process (see also: https://github.com/seratch/antlr-maven-example )
  • identify a good example of what a thought should do (good initial example)
  • generate initial thought process design (design approach)
  • add build and test - buildThought()
  
* develop sequencing to process a thought - getOperationsByMaxLayer()

* run a thought and measure the result against the goal

* Make a scoring machine and score the thoughts for a goal.

* break the classes into different packages

* offspring generator - clone thought

* offspring generator - make mutations from a clone of a parent thought

* offspring generator - merge two thoughts (crossover)

* offspring generator - merge two merged thoughts

* export a thought to JSON

* export a thought as Dot.

* import a thought from JSON

* load large dataset (the first 3 of the "A" set.)

##########################################################
# WIP
##########################################################

* profile and speed up

##########################################################
# functional backlog
##########################################################



* load massive dataset (the whole set)

* create initial offspring generator
  - framework for creating offspring with mutation and crossover

* support genetic operations on offspring generators

* add README content: * genetic algorithm:

* add README content for "the garden"

* add README content: * time-series:

* add README content: * forecasting:

* add README content: * graph processing:

* add README content: ## Motivations

* add README content: ### Under-Researched Areas

* add README content: ### Interactive Capable

* README content for composition of genetic solution solutions from genetic solutions.

* create a median merge from a set of neighbor averaging nodes (mutation)

* create a 'change node type' argument mutation

* create a 'change edge type' argument mutation

##########################################################
# performance backlog
##########################################################

* go through code, identify each for loop, and consider parallel processing it using a reusable thread pool.
  (limit the total number of threads...)  This is likely to result in multiple work items.
  
* speed up unit tests by reducing the number of flushes necessary.


